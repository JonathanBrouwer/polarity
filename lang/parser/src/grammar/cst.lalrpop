use std::rc::Rc;

use syntax::cst::*;

#[LALR]
grammar;

// Tokens
match {
    // Symbols
    "(", ")", "{", "}", ";", ":=", "=>", ",", ":", ".", "=",
    // Names
    r"[a-zA-Z_][a-zA-Z0-9_]*[']*",
    // Keywords
    "def", "codef", "data", "codata",
    "match", "comatch",
    "Type",
    "absurd",
    // Comments and whitespace
    r"\s*" => { }, // Skip whitespace
    r"--[^\n\r]*[\n\r]*" => { }, // Skip `--` comments
}

// Utils
// Based in part on Gluons grammar (https://github.com/gluon-lang/gluon/blob/fac08dcff7a019440dd8d0a886abdb18baa58198/parser/src/grammar.lalrpop)

Comma<Rule>: Vec<Rule> =
    <rules: (<Rule> ",")*> <last: Rule?> => {
        let mut rules = rules;
        rules.extend(last);
        rules
    };

Parens<Rule>: Rule =
    "(" <rule: Rule> ")" => rule;

Braces<Rule>: Rule =
    "{" <rule: Rule> "}" => rule;

ParenthesizedArgs<Rule>: Vec<Rule> = Parens<Comma<Rule>>;
OptParenthesizedArgs<Rule>: Vec<Rule> = <args: Parens<Comma<Rule>>?> => args.unwrap_or_default();

BracedArgs<Rule>: Vec<Rule> = Braces<Comma<Rule>>;
OptBracedArgs<Rule>: Vec<Rule> = <args: Braces<Comma<Rule>>?> => args.unwrap_or_default();

Param: Param = <name: Ident> ":" <typ: Exp> => Param { name, typ } ;
EqnParam : EqnParam = <name: Ident> ":" <eqn: Eqn> => EqnParam { name, eqn } ;

Params: Vec<Param> = ParenthesizedArgs<Param>;
OptParams: Vec<Param> = OptParenthesizedArgs<Param>;

EqnParams: Vec<EqnParam> = BracedArgs<EqnParam>;
OptEqnParams: Vec<EqnParam> = OptBracedArgs<EqnParam>;

Telescope: Telescope = <params: Params> => Telescope(params);
OptTelescope: Telescope = <params: OptParams> => Telescope(params);

Args: Vec<Rc<Exp>> = ParenthesizedArgs<Exp>;
OptArgs: Vec<Rc<Exp>> = OptParenthesizedArgs<Exp>;

// Program

pub Prg: Prg = {
    <decls: (<Decl> ";")*> <exp: Exp?> => Prg { decls, exp },
}

pub Decl: Decl = {
    "data" <name: Ident> <params: OptTelescope> ":" "Type" ":=" <ctors: Comma<Ctor>> => Decl::Data(Data { name, params, ctors }),
    "codata" <name: Ident> <params: OptTelescope> ":" "Type" ":=" <dtors: Comma<Dtor>> => Decl::Codata(Codata { name, params, dtors }),
    "def" <on_typ: TypApp> "." <name: Ident> <params: Telescope> ":" <in_typ: Exp> ":=" <body: Match> => Decl::Def(Def { name, params, on_typ, in_typ, body }),
    "codef" <name: Ident> <params: Telescope> ":" <typ: TypApp> ":=" <body: Comatch> => Decl::Codef(Codef { name, params, typ, body }),
}

Ctor: Ctor = {
    <name: Ident> <params: OptTelescope> ":" <typ: TypApp> => Ctor { name, params, typ },
}

Dtor: Dtor = {
    <on_typ: TypApp> "." <name: Ident> <params: OptTelescope> ":" <in_typ: Exp> => Dtor { name, params, on_typ, in_typ },
}

pub Comatch : Comatch = {
    "comatch" <cases: Comma<Cocase>> => Comatch { cases },
}

pub Match : Match = {
    "match" <cases: Comma<Case>> => Match { cases },
}

pub Case : Case = {
    <name: Ident> <args: OptTelescope> <eqns: OptEqnParams> <body: AbsurdOrBody> => Case { name, args, eqns, body },
}

pub Cocase : Cocase = {
    <name: Ident> <args: OptTelescope> <eqns: OptEqnParams> <body: AbsurdOrBody> => Cocase { name, args, eqns, body },
}

pub AbsurdOrBody: Option<Rc<Exp>> = {
    "absurd" => None,
    "=>" <body: Exp> => Some(body),
}

pub TypApp: TypApp = {
    <name: Ident> <args: OptArgs> => TypApp { name, args },
}

pub Eqn: Eqn = {
    <lhs: Exp> "=" <rhs: Exp> => Eqn { lhs, rhs }
}

pub Exp: Rc<Exp> = {
    <exp: Ops> ":" <typ: Exp> => Rc::new(Exp::Anno { exp, typ }),
    Ops,
}

pub Ops = {
    <exp: Ops> "." <name: Ident> <args: Args> => Rc::new(Exp::DotCall { exp, name, args }),
    App,
}

pub App = {
    <name: Ident> <args: Args> => Rc::new(Exp::Call { name, args }),
    Builtins,
}

pub Builtins: Rc<Exp> = {
    "Type" => Rc::new(Exp::Type),
    Atom,
}

pub Atom: Rc<Exp> = {
    "(" <exp: Exp> ")" => exp,
    <name: Ident> => Rc::new(Exp::Call { name, args: Args::new() }),
}

// Names
Ident: String = <s:r"[a-zA-Z_][a-zA-Z0-9_]*[']*"> => s.to_owned();
