use lalrpop_util::lexer::Token;

use miette::{Diagnostic, SourceOffset, SourceSpan};
use thiserror::Error;

use data::string::comma_separated;

#[derive(Error, Diagnostic, Debug)]
#[diagnostic()]
pub enum ParseError {
    /// Generated by the parser when it encounters a token (or EOF) it did not
    /// expect.
    #[error("Invalid token")]
    InvalidToken {
        #[label]
        location: SourceOffset,
    },

    /// Generated by the parser when it encounters an EOF it did not expect.
    #[error("Unexpected end of file. Expected {expected}")]
    UnrecognizedEOF {
        #[label]
        location: SourceOffset,
        expected: String,
    },

    /// Generated by the parser when it encounters a token it did not expect.
    #[error("Unexpected \"{token}\", expected {expected}")]
    UnrecognizedToken {
        token: String,
        #[label]
        span: SourceSpan,
        expected: String,
    },

    /// Generated by the parser when it encounters additional, unexpected tokens.
    #[error("Excessive \"{token}\"")]
    ExtraToken {
        token: String,
        #[label]
        span: SourceSpan,
    },
    #[error("{error}")]
    User { error: String },
}

impl From<lalrpop_util::ParseError<usize, Token<'_>, &'static str>> for ParseError {
    fn from(err: lalrpop_util::ParseError<usize, Token<'_>, &'static str>) -> Self {
        use lalrpop_util::ParseError::*;
        match err {
            InvalidToken { location } => ParseError::InvalidToken { location: location.into() },
            UnrecognizedEOF { location, expected } => ParseError::UnrecognizedEOF {
                location: location.into(),
                expected: comma_separated(expected),
            },
            UnrecognizedToken { token, expected } => ParseError::UnrecognizedToken {
                token: token.1.to_string(),
                span: (token.0, token.2).into(),
                expected: comma_separated(expected),
            },
            ExtraToken { token } => ParseError::ExtraToken {
                token: token.1.to_string(),
                span: (token.0, token.2).into(),
            },
            User { error } => ParseError::User { error: error.to_owned() },
        }
    }
}
