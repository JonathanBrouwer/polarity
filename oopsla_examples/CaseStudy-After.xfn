-- | The terms of the object language.
codata Tm { }

codef TmIte(c e1 e2: Tm): Tm { }

codef TmFalse: Tm { }

codef TmTrue: Tm { }

-- | The types of the object language.
codata Ty { }

codef TyBool: Ty { }

-- | Small step operational semantics.
data Step(e1 e2: Tm) {
    StIteT(e1 e2: Tm): Step(TmIte(TmTrue, e1, e2), e1),
    StIteF(e1 e2: Tm): Step(TmIte(TmFalse, e1, e2), e2),
    StIte(e1 e2 e3 e4: Tm, s: Step(e1, e2)): Step(TmIte(e1, e3, e4), TmIte(e2, e3, e4))
}

-- | The typing relation.
codata Typing(e: Tm, ty: Ty) {
    Typing(e, ty).pres(e: Tm, ty: Ty): Preservation(e, ty)
}

codef TIte(e1 e2 e3: Tm, ty: Ty, t1: Typing(e1, TyBool), t2: Typing(e2, ty), t3: Typing(e3, ty))
    : Typing(TmIte(e1, e2, e3), ty) {
    pres(e, ty) =>
        comatch PreservationIte {
            preservationStep(_, _, ty, s) =>
                s.match {
                    StIteT(_, _) => t2,
                    StIteF(_, _) => t3,
                    StIte(e1, e1', _, _, s') =>
                        TIte(e1',
                             e2,
                             e3,
                             ty,
                             t1.pres(e1, TyBool).preservationStep(e1, e1', TyBool, s'),
                             t2,
                             t3)
                }
        }
}

codef TTrue: Typing(TmTrue, TyBool) {
    pres(e, ty) =>
        comatch PreservationTrue {
            preservationStep(e1, e2, ty, s) =>
                s.match {
                    StIteT(_, _) absurd,
                    StIteF(_, _) absurd,
                    StIte(_, _, _, _, _) absurd
                }
        }
}

codef TFalse: Typing(TmFalse, TyBool) {
    pres(e, ty) =>
        comatch PreservationFalse {
            preservationStep(e1, e2, ty, s) =>
                s.match {
                    StIteT(_, _) absurd,
                    StIteF(_, _) absurd,
                    StIte(_, _, _, _, _) absurd
                }
        }
}

-- | Preservation.
codata Preservation(e: Tm, ty: Ty) {
    Preservation(e1, ty).preservationStep(e1 e2: Tm, ty: Ty, s: Step(e1, e2)): Typing(e2, ty)
}

